-- SDL3 Premake5 Module for Cinix
-- This script builds SDL3 as a shared or static library that can be included in other projects

project "SDL3"
    kind "StaticLib" -- Default to static, can be overridden in main project
    language "C"
    cdialect "C99"
    
    targetname "SDL3"
    
    -- Use the workspace's output directories by default
    targetdir ("%{wks.location}/bin/" .. outputdir .. "/%{prj.name}")
    objdir ("%{wks.location}/bin-int/" .. outputdir .. "/%{prj.name}")
    
    -- Setup directories
    local SDL3_DIR = _SCRIPT_DIR
    local SDL3_SRC_DIR = SDL3_DIR .. "/src"
    local SDL3_INCLUDE_DIR = SDL3_DIR .. "/include"
    
    -- Helper function to ensure directory exists
    local function ensureDir(dir)
        if not os.isdir(dir) then
            os.execute("mkdir -p " .. dir)
        end
    end
    
    -- Helper function to detect platform-specific features
    local function detectFeatures()
        local features = {}
        
        -- Base configuration for all platforms
        features["SDL_ATOMIC_ENABLED"] = 1
        features["SDL_AUDIO_ENABLED"] = 1
        features["SDL_EVENTS_ENABLED"] = 1
        features["SDL_JOYSTICK_ENABLED"] = 1
        features["SDL_HAPTIC_ENABLED"] = 1
        features["SDL_SENSOR_ENABLED"] = 1
        features["SDL_LOADSO_ENABLED"] = 1
        features["SDL_RENDER_ENABLED"] = 1
        features["SDL_THREADS_ENABLED"] = 1
        features["SDL_TIMERS_ENABLED"] = 1
        features["SDL_VIDEO_ENABLED"] = 1
        features["SDL_POWER_ENABLED"] = 1
        features["SDL_LOCALE_ENABLED"] = 1
        features["SDL_MISC_ENABLED"] = 1
        
        -- Platform-specific features
        if os.host() == "windows" then
            features["SDL_AUDIO_DRIVER_WASAPI"] = 1
            features["SDL_AUDIO_DRIVER_WINMM"] = 1
            features["SDL_VIDEO_DRIVER_WINDOWS"] = 1
            features["SDL_THREAD_WINDOWS"] = 1
            features["SDL_TIMER_WINDOWS"] = 1
            features["SDL_LOADSO_WINDOWS"] = 1
            features["SDL_FILESYSTEM_WINDOWS"] = 1
        elseif os.host() == "linux" then
            features["SDL_AUDIO_DRIVER_ALSA"] = 1
            features["SDL_AUDIO_DRIVER_PULSEAUDIO"] = 1
            features["SDL_VIDEO_DRIVER_X11"] = 1
            -- Wayland disabled for now
            features["SDL_VIDEO_DRIVER_WAYLAND"] = 0
            features["SDL_THREAD_PTHREAD"] = 1
            features["SDL_TIMER_UNIX"] = 1
            features["SDL_LOADSO_DLOPEN"] = 1
            features["SDL_FILESYSTEM_UNIX"] = 1
            features["SDL_USE_DBUS"] = 1
        end
        
        return features
    end
    
    -- Generate build config header - this runs during prebuildcommands
    local function generateBuildConfig()
        local features = detectFeatures()
        local configDir = SDL3_INCLUDE_DIR .. "/build-generated"
        
        ensureDir(configDir)
        
        local file = io.open(configDir .. "/SDL_build_config.h", "w")
        if file then
            file:write("/* Generated by premake5 */\n")
            file:write("#ifndef SDL_build_config_h_\n")
            file:write("#define SDL_build_config_h_\n\n")
            
            file:write("/* Standard includes */\n")
            file:write("#include <stdio.h>\n")
            file:write("#include <stdlib.h>\n")
            file:write("#include <stddef.h>\n")
            file:write("#include <stdint.h>\n\n")
            
            -- Add detected features
            for key, value in pairs(features) do
                file:write(string.format("#define %s %d\n", key, value))
            end
            
            -- Add platform-specific definitions
            file:write("\n/* Platform-specific definitions */\n")
            if os.host() == "windows" then
                file:write("#define SDL_PLATFORM_WINDOWS 1\n")
            elseif os.host() == "linux" then
                file:write("#define SDL_PLATFORM_LINUX 1\n")
            end
            
            file:write("\n#endif /* SDL_build_config_h_ */\n")
            file:close()
            
            print("Generated SDL_build_config.h in " .. configDir)
        else
            print("Error: Could not create SDL_build_config.h")
        end
    end
    
    -- Patch SDL_dynapi.h to disable the error - this runs during prebuildcommands
    local function patchDynapiHeader()
        local filename = SDL3_SRC_DIR .. "/dynapi/SDL_dynapi.h"
        local tmpFilename = filename .. ".tmp"
        
        local inFile = io.open(filename, "r")
        if not inFile then
            print("Warning: Could not open " .. filename .. " for patching")
            return
        end
        
        local outFile = io.open(tmpFilename, "w")
        if not outFile then
            inFile:close()
            print("Error: Could not create temporary file for patching")
            return
        end
        
        local patched = false
        for line in inFile:lines() do
            if line:find("#error Nope, you have to edit this file to force this off.") then
                outFile:write("/* Patched: Disabled dynamic API */\n")
                patched = true
            else
                outFile:write(line .. "\n")
            end
        end
        
        inFile:close()
        outFile:close()
        
        if patched then
            os.rename(filename, filename .. ".bak")
            os.rename(tmpFilename, filename)
            print("Patched " .. filename .. " to disable dynamic API error")
        else
            os.remove(tmpFilename)
            print("Warning: Could not find the line to patch in " .. filename)
        end
    end
    
    -- Patch X11 XInput2 header - this runs during prebuildcommands
    local function patchX11XInput2Header()
        local filename = SDL3_SRC_DIR .. "/video/x11/SDL_x11xinput2.h"
        local tmpFilename = filename .. ".tmp"
        
        local inFile = io.open(filename, "r")
        if not inFile then
            print("Warning: Could not open " .. filename .. " for patching")
            return
        end
        
        local outFile = io.open(tmpFilename, "w")
        if not outFile then
            inFile:close()
            print("Error: Could not create temporary file for patching")
            return
        end
        
        local patched = false
        for line in inFile:lines() do
            if line:find("typedef struct XGenericEventCookie XGenericEventCookie;") then
                outFile:write("/* Patched: Removed XGenericEventCookie redefinition */\n")
                patched = true
            else
                outFile:write(line .. "\n")
            end
        end
        
        inFile:close()
        outFile:close()
        
        if patched then
            os.rename(filename, filename .. ".bak")
            os.rename(tmpFilename, filename)
            print("Patched " .. filename .. " to fix XGenericEventCookie redefinition")
        else
            os.remove(tmpFilename)
            print("Warning: Could not find the line to patch in " .. filename)
        end
    end
    
    -- Create SDL_dbus.h for Linux builds - this runs during prebuildcommands
    local function createDBusHeader()
        local dbus_dir = SDL3_SRC_DIR .. "/core/linux"
        local dbus_header = dbus_dir .. "/SDL_dbus.h"
        
        -- Check if the file already exists
        local file = io.open(dbus_header, "r")
        if file then
            file:close()
            return
        end
        
        ensureDir(dbus_dir)
        
        file = io.open(dbus_header, "w")
        if file then
            file:write([=[
/* Generated by premake5 */
#ifndef SDL_dbus_h_
#define SDL_dbus_h_
#ifdef HAVE_DBUS_DBUS_H
#include <dbus/dbus.h>
#endif
#include "SDL_stdinc.h"
typedef struct SDL_DBusContext
{
    void *session_conn;
    void *system_conn;
    
    /* Methods */
    int (*bus_add_match)(void *conn, const char *rule, void **error);
    int (*connection_add_filter)(void *conn, DBusHandlerResult (*function)(DBusConnection*, DBusMessage*, void*), void *data, void (*free_data_function)(void*));
    void (*connection_flush)(void *conn);
    int (*connection_read_write)(void *conn, int timeout_milliseconds);
    int (*connection_dispatch)(void *conn);
    
    /* Add any other methods and types needed */
    
} SDL_DBusContext;
extern SDL_DBusContext *SDL_DBus_GetContext(void);
extern void SDL_DBus_CallMethod(const char *service, const char *path, const char *interface, const char *method, ...);
extern void SDL_DBus_CallVoidMethod(const char *service, const char *path, const char *interface, const char *method, ...);
/* D-Bus types from dbus/dbus.h if not available */
#ifndef HAVE_DBUS_DBUS_H
#define DBUS_TYPE_INVALID       ((int) '\0')
#define DBUS_TYPE_BYTE          ((int) 'y')
#define DBUS_TYPE_BOOLEAN       ((int) 'b')
#define DBUS_TYPE_INT16         ((int) 'n')
#define DBUS_TYPE_UINT16        ((int) 'q')
#define DBUS_TYPE_INT32         ((int) 'i')
#define DBUS_TYPE_UINT32        ((int) 'u')
#define DBUS_TYPE_INT64         ((int) 'x')
#define DBUS_TYPE_UINT64        ((int) 't')
#define DBUS_TYPE_DOUBLE        ((int) 'd')
#define DBUS_TYPE_STRING        ((int) 's')
#define DBUS_TYPE_OBJECT_PATH   ((int) 'o')
#define DBUS_TYPE_SIGNATURE     ((int) 'g')
typedef enum {
    DBUS_DISPATCH_DATA_REMAINS,
    DBUS_DISPATCH_COMPLETE,
    DBUS_DISPATCH_NEED_MEMORY
} DBusDispatchStatus;
typedef enum {
    DBUS_HANDLER_RESULT_HANDLED,
    DBUS_HANDLER_RESULT_NOT_YET_HANDLED,
    DBUS_HANDLER_RESULT_NEED_MEMORY
} DBusHandlerResult;
typedef struct DBusMessage DBusMessage;
typedef struct DBusConnection DBusConnection;
#endif
#endif /* SDL_dbus_h_ */
]=])
            file:close()
            print("Created SDL_dbus.h in " .. dbus_dir)
        else
            print("Error: Could not create SDL_dbus.h")
        end
    end
    
    -- Run all patch commands before build
    prebuildcommands {
        function()
            generateBuildConfig()
            patchDynapiHeader()
            createDBusHeader()
            patchX11XInput2Header()
            return 0
        end
    }
    
    -- Include directories
    includedirs {
        SDL3_INCLUDE_DIR,
        SDL3_INCLUDE_DIR .. "/SDL3",
        SDL3_INCLUDE_DIR .. "/build-generated",
        SDL3_SRC_DIR,
        SDL3_SRC_DIR .. "/audio",
        SDL3_SRC_DIR .. "/video",
        SDL3_SRC_DIR .. "/render",
        SDL3_SRC_DIR .. "/events",
        SDL3_SRC_DIR .. "/joystick",
        SDL3_SRC_DIR .. "/haptic",
        SDL3_SRC_DIR .. "/thread",
        SDL3_SRC_DIR .. "/timer",
        SDL3_SRC_DIR .. "/file",
        SDL3_SRC_DIR .. "/stdlib",
        SDL3_SRC_DIR .. "/core",
        SDL3_SRC_DIR .. "/core/linux",  -- For D-Bus headers
    }
    
    -- Core source files
    files {
        SDL3_SRC_DIR .. "/*.c",
        SDL3_SRC_DIR .. "/audio/*.c",
        SDL3_SRC_DIR .. "/cpuinfo/*.c",
        SDL3_SRC_DIR .. "/events/*.c",
        SDL3_SRC_DIR .. "/file/*.c",
        SDL3_SRC_DIR .. "/haptic/*.c",
        SDL3_SRC_DIR .. "/joystick/*.c",
        SDL3_SRC_DIR .. "/libm/*.c",
        SDL3_SRC_DIR .. "/render/*.c",
        SDL3_SRC_DIR .. "/stdlib/*.c",
        SDL3_SRC_DIR .. "/thread/*.c",
        SDL3_SRC_DIR .. "/timer/*.c",
        SDL3_SRC_DIR .. "/video/*.c",
        SDL3_SRC_DIR .. "/atomic/*.c",
        SDL3_SRC_DIR .. "/sensor/*.c",
        SDL3_SRC_DIR .. "/core/*.c",
        SDL3_SRC_DIR .. "/power/*.c",
        SDL3_SRC_DIR .. "/locale/*.c",
        SDL3_SRC_DIR .. "/misc/*.c",
        SDL3_INCLUDE_DIR .. "/*.h",
    }
    
    -- Common defines
    defines {
        "SDL_DYNAMIC_API=0",  -- Disable dynamic API
        "HAVE_CONFIG_H",
    }
    
    -- Static library config
    filter "kind:StaticLib"
        defines {
            "SDL_STATIC_LIB",
        }
    
    -- Shared library config
    filter "kind:SharedLib"
        defines {
            "SDL_BUILDING_LIBRARY",
        }
        
        filter {"kind:SharedLib", "system:linux"}
            linkoptions { "-Wl,-rpath,$ORIGIN" }
    
    -- Windows specific
    filter "system:windows"
        defines {
            "_WINDOWS",
            "UNICODE", 
            "_UNICODE",
            "_WIN32_WINNT=0x0601", -- Target Windows 7 or later
        }
        
        files {
            SDL3_SRC_DIR .. "/core/windows/*.c",
            SDL3_SRC_DIR .. "/audio/windows/*.c",
            SDL3_SRC_DIR .. "/video/windows/*.c",
            SDL3_SRC_DIR .. "/thread/windows/*.c",
            SDL3_SRC_DIR .. "/timer/windows/*.c",
            SDL3_SRC_DIR .. "/joystick/windows/*.c",
            SDL3_SRC_DIR .. "/power/windows/*.c",
            SDL3_SRC_DIR .. "/filesystem/windows/*.c",
            SDL3_SRC_DIR .. "/locale/windows/*.c",
            SDL3_SRC_DIR .. "/misc/windows/*.c",
        }
        
        links {
            "winmm",
            "version", 
            "imm32",
            "setupapi",
            "user32",
            "gdi32",
            "advapi32",
            "ole32",
            "oleaut32",
            "shell32",
        }
    
    -- Linux specific
    filter "system:linux"
        buildoptions { "-fPIC" }
        defines { 
            "_REENTRANT",
            "HAVE_DBUS_DBUS_H",
            "SDL_VIDEO_DRIVER_WAYLAND=0"  -- Explicitly disable Wayland
        }
        
        files {
            SDL3_SRC_DIR .. "/core/linux/*.c",
            SDL3_SRC_DIR .. "/audio/alsa/*.c",
            SDL3_SRC_DIR .. "/audio/pulseaudio/*.c",
            SDL3_SRC_DIR .. "/video/x11/*.c",
            -- SDL3_SRC_DIR .. "/src/video/wayland/*.c", -- Commented out for now
            SDL3_SRC_DIR .. "/thread/pthread/*.c",
            SDL3_SRC_DIR .. "/timer/unix/*.c",
            SDL3_SRC_DIR .. "/joystick/linux/*.c",
            SDL3_SRC_DIR .. "/haptic/linux/*.c",
            SDL3_SRC_DIR .. "/power/linux/*.c",
            SDL3_SRC_DIR .. "/filesystem/unix/*.c",
            SDL3_SRC_DIR .. "/locale/unix/*.c",
            SDL3_SRC_DIR .. "/misc/unix/*.c",
        }
        
        buildoptions { 
            "`pkg-config --cflags dbus-1`",
        }
        
        links {
            "dl",
            "pthread",
            "m",
        }
        
        filter {"kind:SharedLib", "system:linux"}
            linkoptions {
                "`pkg-config --libs dbus-1`",
            }
    
    -- Reset filter
    filter {}
